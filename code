# Import Libraries
import pandas as pd
import numpy as np
import re
import string
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Download NLTK resources if not already downloaded
nltk.download('stopwords')
nltk.download('punkt')
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# 1. Load Dataset (Sample: 'tweet', 'sentiment' columns)
# For demonstration, using a public dataset. Replace with your own data as needed.
df = pd.read_csv('https://raw.githubusercontent.com/kolaveridi/kaggle-Twitter-US-Airline-Sentiment-/master/Tweets.csv')
df = df[['text', 'airline_sentiment']]
df.columns = ['tweet', 'sentiment']

# Optional: Map sentiment to positive, neutral, negative
df['sentiment'] = df['sentiment'].map({'positive': 'positive', 'neutral': 'neutral', 'negative': 'negative'})

# 2. Preprocess Tweets
def preprocess_tweet(text):
    text = text.lower()  # Lowercase
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)  # Remove links
    text = re.sub(r'\@w+|\#','', text)  # Remove mentions and hashtags
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    text = re.sub(r'\d+', '', text)  # Remove numbers
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]  # Remove stopwords
    return " ".join(tokens)

df['clean_tweet'] = df['tweet'].apply(preprocess_tweet)

# 3. Feature Extraction (TF-IDF)
X = df['clean_tweet']
y = df['sentiment']
tfidf = TfidfVectorizer(max_features=5000)
X_tfidf = tfidf.fit_transform(X)

# 4. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42, stratify=y)

# 5. Model Training
model = MultinomialNB()
model.fit(X_train, y_train)

# 6. Model Evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 7. Confusion Matrix Visualization
cm = confusion_matrix(y_test, y_pred, labels=['positive', 'neutral', 'negative'])
sns.heatmap(cm, annot=True, fmt='d', xticklabels=['positive', 'neutral', 'negative'], 
            yticklabels=['positive', 'neutral', 'negative'], cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Sentiment Confusion Matrix')
plt.show()

# 8. Visualize a few predictions
results_df = pd.DataFrame({'Tweet': df['tweet'].iloc[y_test.index], 
                          'Actual': y_test, 'Predicted': y_pred})
print(results_df.head(10))
